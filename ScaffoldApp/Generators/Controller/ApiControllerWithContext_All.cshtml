@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@{
if (@Model.NullableEnabled)
{
    @:#nullable disable

}
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
    @:using @namespaceName;
    }
}

namespace @Model.ControllerNamespace
{
@{
    string routePrefix = "api/" + Model.ControllerRootName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = Model.ModelMetadata.PrimaryKeys[0].IsAutoGenerated;

    var serviceAbstractClassType = Model.ModelTypeName + "ServiceBase";
    var serviceAbstractClassName = Model.ModelVariable + "Service";
    var constructorLine = "public " + Model.ControllerName + "(" + serviceAbstractClassType + " " + serviceAbstractClassName + ")";
    var listLine = "List<" + Model.ModelTypeName + "> " + Model.ModelVariable + "List = " + ("_" + serviceAbstractClassName) + ".GetList();";
    var itemLine = Model.ModelTypeName + " " + Model.ModelVariable + " = " + ("_" + serviceAbstractClassName) + ".GetItem(id);";
    var okListLine = "return Ok(" + Model.ModelVariable + "List);";
    var okItemLine = "return Ok(" + Model.ModelVariable + ");";
    var addLine = "var result = " + ("_" + serviceAbstractClassName) + ".Add(" + Model.ModelVariable + ");";
    var updateLine = "var result = " + ("_" + serviceAbstractClassName) + ".Update(" + Model.ModelVariable + ");";
    var deleteLine = "var result = " + ("_" + serviceAbstractClassName) + ".Delete(m => m.Id == id);";
    var ifResultSuccessfulLine = "if (result.IsSuccessful)";
    var openCurlyBraceLine = "{";
    var createdAtActionLine = "//return CreatedAtAction(\"Get\", new { id = " + Model.ModelVariable + "." + primaryKeyName + " }, " + Model.ModelVariable + ");";
    var okLine = "return Ok(" + Model.ModelVariable + ");";
    var okIdLine = "return Ok(id);";
    var noContentLine = "//return NoContent();";
    var closeCurlyBraceLine = "}";
    var modelStateLine = "ModelState.AddModelError(\"\", result.Message);";
}
    [Route("api/[controller]")]
    [ApiController]
    public class @Model.ControllerName : ControllerBase
    {
        // Add service injections here
        private readonly @serviceAbstractClassType @("_" + serviceAbstractClassName);

        @constructorLine
        {
            @("_" + serviceAbstractClassName) = @serviceAbstractClassName;
        }

        // GET: @routePrefix
        [HttpGet]
        public IActionResult Get()
        {
            @listLine
            @okListLine
        }

        // GET: @routePrefix/5
        [HttpGet("{id}")]
        public IActionResult Get(@primaryKeyShortTypeName id)
        {
            @itemLine
			if (@Model.ModelVariable == null)
            {
                return NotFound();
            }
			@okItemLine
        }

		// POST: @routePrefix
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public IActionResult Post(@Model.ModelTypeName @Model.ModelVariable)
        {
            if (ModelState.IsValid)
            {
                @addLine
                @ifResultSuccessfulLine
                @openCurlyBraceLine
			        @createdAtActionLine
                    @okLine
                @closeCurlyBraceLine
                @modelStateLine
            }
            return BadRequest(ModelState);
        }

        // PUT: @routePrefix
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut]
        public IActionResult Put(@Model.ModelTypeName @Model.ModelVariable)
        {
            if (ModelState.IsValid)
            {
                @updateLine
                @ifResultSuccessfulLine
                @openCurlyBraceLine
			        @noContentLine
                    @okLine
                @closeCurlyBraceLine
                @modelStateLine
            }
            return BadRequest(ModelState);
        }

        // DELETE: @routePrefix/5
        [HttpDelete("{id}")]
        public IActionResult Delete(@primaryKeyShortTypeName id)
        {
            @deleteLine
            @ifResultSuccessfulLine
            @openCurlyBraceLine
                @noContentLine
                @okIdLine
            @closeCurlyBraceLine
            @modelStateLine
            return BadRequest(ModelState);
        }
	}
}
