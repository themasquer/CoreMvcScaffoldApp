@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@{
if (@Model.NullableEnabled)
{
@:#nullable disable

}
}
@using System.Collections.Generic;
@using System.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @namespaceName;
    }
}

namespace @Model.ControllerNamespace
{
@{
    string routePrefix;
    if (String.IsNullOrEmpty(Model.AreaName))
    {
        routePrefix = Model.ControllerRootName;
    }
    else
    {
        routePrefix = Model.AreaName + "/" + Model.ControllerRootName;
    }
    var modelProperties = new List<string>();
    foreach (var property in Model.ModelMetadata.Properties)
    {
        if (property.Scaffold)
        {
            modelProperties.Add(property.PropertyName);
        }
    }
    var bindString = string.Join(",", modelProperties);
    var contextTypeName = Model.ContextTypeName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var entitySetVar = Model.EntitySetVariable ??
        (String.IsNullOrEmpty(entitySetName)
            ? entitySetName
            : (entitySetName.Substring(0, length: 1).ToLowerInvariant() + entitySetName.Substring(1)));
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
    var lambdaVar = Model.ModelVariable[0];
    var relatedProperties = new Dictionary<string, dynamic>();
    foreach (var nav in Model.ModelMetadata.Navigations)
    {
        relatedProperties.Add(nav.AssociationPropertyName, nav);

    }

    var inlineIncludes = "";
    foreach (var property in relatedProperties.Values)
    {
        inlineIncludes += string.Format("{0}                .Include({1} => {1}.{2})", Environment.NewLine, lambdaVar, property.AssociationPropertyName);
    }

    if (!string.IsNullOrEmpty(Model.AreaName))
    {
    @:@string.Format("[Area(\"{0}\")]", Model.AreaName)
    }

    var serviceAbstractClassType = Model.ModelTypeName + "ServiceBase";
    var serviceAbstractClassName = Model.ModelVariable + "Service";
    var constructorLine = "public " + Model.ControllerName + "(" + serviceAbstractClassType + " " + serviceAbstractClassName + ")";
    var listLine = "List<" + Model.ModelTypeName + "> " + Model.ModelVariable + "List = " + ("_" + serviceAbstractClassName) + ".GetList();";
    var itemLine = Model.ModelTypeName + " " + Model.ModelVariable + " = " + ("_" + serviceAbstractClassName) + ".GetItem(id);";
    var viewListLine = "return View(" + Model.ModelVariable + "List);";
    var viewItemLine = "return View(" + Model.ModelVariable + ");";
    var addLine = "var result = " + ("_" + serviceAbstractClassName) + ".Add(" + Model.ModelVariable + ");";
    var updateLine = "var result = " + ("_" + serviceAbstractClassName) + ".Update(" + Model.ModelVariable + ");";
    var deleteLine = "var result = " + ("_" + serviceAbstractClassName) + ".Delete(m => m.Id == id);";
    var ifResultSuccessfulLine = "if (result.IsSuccessful)";
    var openCurlyBraceLine = "{";
    var TempDataLine = "TempData[\"Message\"] = result.Message; // End message in service with '.' for success, '!' for danger Bootstrap CSS classes to be used in the View";
    var redirectLine = "return RedirectToAction(nameof(Index));";
    var closeCurlyBraceLine = "}";
    var modelStateLine = "ModelState.AddModelError(\"\", result.Message);";
    var viewBagLine = "//ViewBag.Message = result.Message; // End message in service with '.' for success, '!' for danger Bootstrap CSS classes to be used in the View";
    var listCountLine = "ViewBag.Message = " + Model.ModelVariable + "List.Count == 0 ? \"No records found!\" : " + Model.ModelVariable + "List.Count == 1 ? \"1 record found.\" : \"" + Model.ModelVariable + "List.Count records found.\";";
    var itemNotFoundLine = "ViewBag.Message = \"Record not found!\";";
}
    public class @Model.ControllerName : Controller
    {
        // Add service injections here
        private readonly @serviceAbstractClassType @("_" + serviceAbstractClassName);

        @constructorLine
        {
            @("_" + serviceAbstractClassName) = @serviceAbstractClassName;
        }

        // GET: @routePrefix
        public IActionResult Index()
        {
            @listLine
            @listCountLine
            @viewListLine
        }

        // GET: @routePrefix/Details/5
        public IActionResult Details(@primaryKeyShortTypeName id)
        {
            @itemLine
            if (@Model.ModelVariable == null)
            {
                //return NotFound();
                @itemNotFoundLine
            }
            @viewItemLine
        }

        // GET: @routePrefix/Create
        public IActionResult Create()
        {
            // Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
@{
    foreach (var property in relatedProperties.Values)
    {
            @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(null, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName");
    }
}            return View();
        }

        // POST: @routePrefix/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(@Model.ModelTypeName @Model.ModelVariable)
        {
            if (ModelState.IsValid)
            {
@{
    if (!string.IsNullOrEmpty(primaryKeyType) && IsGuid(primaryKeyType))
    {
                @:@(Model.ModelVariable).@primaryKeyName = Guid.NewGuid();
    }
}
                @addLine
                @ifResultSuccessfulLine
                @openCurlyBraceLine
                    @TempDataLine
                    @redirectLine
                @closeCurlyBraceLine
                @viewBagLine
                @modelStateLine
            }
            // Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
@{
    foreach (var property in relatedProperties.Values)
    {
            @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(null, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName", @(Model.ModelVariable).@property.ForeignKeyPropertyNames[0]);
    }
}
            return View(@Model.ModelVariable);
        }

        // GET: @routePrefix/Edit/5
        public IActionResult Edit(@primaryKeyShortTypeName id)
        {
            @itemLine
            if (@Model.ModelVariable == null)
            {
                //return NotFound();
                @itemNotFoundLine
            }
            else
            {
                // Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
@{
    foreach (var property in relatedProperties.Values)
    {
                @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(null, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName", @(Model.ModelVariable).@property.ForeignKeyPropertyNames[0]);
    }
}
            }
            return View(@Model.ModelVariable);
        }

        // POST: @routePrefix/Edit
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Edit(@Model.ModelTypeName @Model.ModelVariable)
        {
            if (ModelState.IsValid)
            {
                @updateLine
                @ifResultSuccessfulLine
                @openCurlyBraceLine
                    @TempDataLine
                    @redirectLine
                @closeCurlyBraceLine
                @viewBagLine
                @modelStateLine
            }
            // Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
@{
    foreach (var property in relatedProperties.Values)
    {
            @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(null, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName", @(Model.ModelVariable).@property.ForeignKeyPropertyNames[0]);
    }
}
            return View(@Model.ModelVariable);
        }

        // GET: @routePrefix/Delete/5
        public IActionResult Delete(@primaryKeyShortTypeName id)
        {
            @itemLine
            if (@Model.ModelVariable == null)
            {
                //return NotFound();
                @itemNotFoundLine
            }
            return View(@Model.ModelVariable);
        }

        // POST: @routePrefix/Delete
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public IActionResult DeleteConfirmed(@primaryKeyShortTypeName id)
        {
            @deleteLine
            @TempDataLine
            @redirectLine
        }
	}
}
@functions
{
    // This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
    // sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    string GetNullableTypeName(string typeName, string shortTypeName)
    {
        // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Type primaryKeyType = null;
        try
        {
            primaryKeyType = Type.GetType(typeName);
        }
        catch
        {
        }
        if (primaryKeyType != null && (!Microsoft.VisualStudio.Web.CodeGeneration.Templating.TypeUtilities.IsNullable(primaryKeyType) || IsGuid(typeName)))
        {
            return shortTypeName + "?";
        }
        return shortTypeName;
    }

    bool IsGuid(string typeName) {
        return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
    }
}
